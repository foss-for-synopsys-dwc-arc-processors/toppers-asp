#
#  TOPPERS/ASP Kernel
#      Toyohashi Open Platform for Embedded Real-Time Systems/
#      Advanced Standard Profile Kernel
# 
#  Copyright (C) 2003 by Embedded and Real-Time Systems Laboratory
#                              Toyohashi Univ. of Technology, JAPAN
#  Copyright (C) 2005-2010 by Embedded and Real-Time Systems Laboratory
#              Graduate School of Information Science, Nagoya Univ., JAPAN
# 
#	The above copyright holders grant permission gratis to use,
#	duplicate, modify, or redistribute (hereafter called use) this
#	software (including the one made by modifying this software),
#	provided that the following four conditions (1) through (4) are
#	satisfied.
#
#	(1) When this software is used in the form of source code, the above
#    	copyright notice, this use conditions, and the disclaimer shown
#    	below must be retained in the source code without modification.
#
#	(2) When this software is redistributed in the forms usable for the
#    	development of other software, such as in library form, the above
#    	copyright notice, this use conditions, and the disclaimer shown
#    	below must be shown without modification in the document provided
#    	with the redistributed software, such as the user manual.
#
#	(3) When this software is redistributed in the forms unusable for the
#    	development of other software, such as the case when the software
#    	is embedded in a piece of equipment, either of the following two
#   	 conditions must be satisfied:
#
#  		(a) The above copyright notice, this use conditions, and the
#         	disclaimer shown below must be shown without modification in
#     		the document provided with the redistributed software, such as
#      	the user manual.
#
# 		(b) How the software is to be redistributed must be reported to the
#     		TOPPERS Project according to the procedure described
#     		separately.
#
#	(4) The above copyright holders and the TOPPERS Project are exempt
#    	from responsibility for any type of damage directly or indirectly
#   	caused from the use of this software and are indemnified by any
#    	users or end users of this software from any and all causes of
#    	action whatsoever.
#
#	THIS SOFTWARE IS PROVIDED "AS IS." THE ABOVE COPYRIGHT HOLDERS AND
#	THE TOPPERS PROJECT DISCLAIM ANY EXPRESS OR IMPLIED WARRANTIES,
#	INCLUDING, BUT NOT LIMITED TO, ITS APPLICABILITY TO A PARTICULAR
#	PURPOSE. IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS AND THE
#	TOPPERS PROJECT BE LIABLE FOR ANY TYPE OF DAMAGE DIRECTLY OR
#	INDIRECTLY CAUSED FROM THE USE OF THIS SOFTWARE.
# 
#  @(#) #Id: Makefile.kernel 1966 2010-11-20 07:23:56Z ertl-hiro #
# 

#
#		the definition of kernel files
#

#
#  the list of files which can be compiled in function unit
#  (one file can generate multiple object files)
#
KERNEL_FCSRCS = startup.c task.c wait.c time_event.c \
				task_manage.c task_refer.c task_sync.c task_except.c \
				semaphore.c eventflag.c dataqueue.c pridataq.c mailbox.c \
				mempfix.c time_manage.c cyclic.c alarm.c \
				sys_manage.c interrupt.c exception.c

#
#  the list of object files generated by KERNEL_FCSRCS
#
startup = sta_ker.o ext_ker.o kermem.o

task = tskini.o tsksched.o tskrun.o tsknrun.o \
		tskdmt.o tskact.o tskpri.o tskrot.o tsktex.o

wait = waimake.o waicmp.o waitmo.o waitmook.o \
		wairel.o wobjwai.o wobjwaitmo.o iniwque.o

time_event = tmeini.o tmeup.o tmedown.o tmeins.o tmedel.o tmeltim.o sigtim.o

task_manage = acre_tsk.o del_tsk.o act_tsk.o iact_tsk.o can_act.o \
		ext_tsk.o ter_tsk.o chg_pri.o get_pri.o get_inf.o

task_refer = ref_tsk.o

task_sync = slp_tsk.o tslp_tsk.o wup_tsk.o iwup_tsk.o can_wup.o \
		rel_wai.o irel_wai.o sus_tsk.o rsm_tsk.o dly_tsk.o

task_except = def_tex.o ras_tex.o iras_tex.o dis_tex.o ena_tex.o \
		sns_tex.o ref_tex.o

semaphore = semini.o acre_sem.o del_sem.o sig_sem.o isig_sem.o \
		wai_sem.o pol_sem.o twai_sem.o ini_sem.o ref_sem.o

eventflag = flgini.o flgcnd.o acre_flg.o del_flg.o set_flg.o iset_flg.o \
		clr_flg.o wai_flg.o pol_flg.o twai_flg.o ini_flg.o ref_flg.o

dataqueue = dtqini.o dtqenq.o dtqfenq.o dtqdeq.o dtqsnd.o dtqfsnd.o dtqrcv.o \
		acre_dtq.o del_dtq.o snd_dtq.o psnd_dtq.o ipsnd_dtq.o tsnd_dtq.o \
		fsnd_dtq.o ifsnd_dtq.o rcv_dtq.o prcv_dtq.o trcv_dtq.o ini_dtq.o \
		ref_dtq.o

pridataq = pdqini.o pdqenq.o pdqdeq.o pdqsnd.o pdqrcv.o \
		acre_pdq.o del_pdq.o snd_pdq.o psnd_pdq.o ipsnd_pdq.o tsnd_pdq.o \
		rcv_pdq.o prcv_pdq.o trcv_pdq.o ini_pdq.o ref_pdq.o

mailbox = mbxini.o acre_mbx.o del_mbx.o snd_mbx.o rcv_mbx.o \
		prcv_mbx.o trcv_mbx.o ini_mbx.o ref_mbx.o

mempfix = mpfini.o mpfget.o acre_mpf.o del_mpf.o get_mpf.o\
		 pget_mpf.o tget_mpf.o rel_mpf.o ini_mpf.o ref_mpf.o

time_manage = get_tim.o get_utm.o

cyclic = cycini.o acre_cyc.o del_cyc.o sta_cyc.o stp_cyc.o ref_cyc.o cyccal.o

alarm = almini.o acre_alm.o del_alm.o sta_alm.o ista_alm.o stp_alm.o \
		istp_alm.o ref_alm.o almcal.o

sys_manage = rot_rdq.o irot_rdq.o get_tid.o iget_tid.o \
		loc_cpu.o iloc_cpu.o unl_cpu.o iunl_cpu.o dis_dsp.o ena_dsp.o \
		sns_ctx.o sns_loc.o sns_dsp.o sns_dpn.o sns_ker.o

interrupt = isrini.o isrcal.o acre_isr.o del_isr.o \
		intini.o dis_int.o ena_int.o chg_ipm.o get_ipm.o

exception = excini.o xsns_dpn.o xsns_xpn.o

#
#  the dependency of generated object files
#
$(startup) $(startup:.o=.s) $(startup:.o=.d): startup.c
$(task) $(task:.o=.s) $(task:.o=.d): task.c
$(wait) $(wait:.o=.s) $(wait:.o=.d): wait.c
$(time_event) $(time_event:.o=.s) $(time_event:.o=.d): time_event.c
$(task_manage) $(task_manage:.o=.s) $(task_manage:.o=.d): task_manage.c
$(task_refer) $(task_refer:.o=.s) $(task_refer:.o=.d): task_refer.c
$(task_sync) $(task_sync:.o=.s) $(task_sync:.o=.d): task_sync.c
$(task_except) $(task_except:.o=.s) $(task_except:.o=.d): task_except.c
$(semaphore) $(semaphore:.o=.s) $(semaphore:.o=.d): semaphore.c
$(eventflag) $(eventflag:.o=.s) $(eventflag:.o=.d): eventflag.c
$(dataqueue) $(dataqueue:.o=.s) $(dataqueue:.o=.d): dataqueue.c
$(pridataq) $(pridataq:.o=.s) $(pridataq:.o=.d): pridataq.c
$(mailbox) $(mailbox:.o=.s) $(mailbox:.o=.d): mailbox.c
$(mempfix) $(mempfix:.o=.s) $(mempfix:.o=.d): mempfix.c
$(time_manage) $(time_manage:.o=.s) $(time_manage:.o=.d): time_manage.c
$(cyclic) $(cyclic:.o=.s) $(cyclic:.o=.d): cyclic.c
$(alarm) $(alarm:.o=.s) $(alarm:.o=.d): alarm.c
$(sys_manage) $(sys_manage:.o=.s) $(sys_manage:.o=.d): sys_manage.c
$(interrupt) $(interrupt:.o=.s) $(interrupt:.o=.d): interrupt.c
$(exception) $(exception:.o=.s) $(exception:.o=.d): exception.c
