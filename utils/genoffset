#! /usr/bin/perl
#
#  TOPPERS Software
#      Toyohashi Open Platform for Embedded Real-Time Systems
# 
#  Copyright (C) 2000-2003 by Embedded and Real-Time Systems Laboratory
#                              Toyohashi Univ. of Technology, JAPAN
#  Copyright (C) 2004-2010 by Embedded and Real-Time Systems Laboratory
#              Graduate School of Information Science, Nagoya Univ., JAPAN
# 
#	The above copyright holders grant permission gratis to use,
#	duplicate, modify, or redistribute (hereafter called use) this
#	software (including the one made by modifying this software),
#	provided that the following four conditions (1) through (4) are
#	satisfied.
#
#	(1) When this software is used in the form of source code, the above
#    	copyright notice, this use conditions, and the disclaimer shown
#    	below must be retained in the source code without modification.
#
#	(2) When this software is redistributed in the forms usable for the
#    	development of other software, such as in library form, the above
#    	copyright notice, this use conditions, and the disclaimer shown
#    	below must be shown without modification in the document provided
#    	with the redistributed software, such as the user manual.
#
#	(3) When this software is redistributed in the forms unusable for the
#    	development of other software, such as the case when the software
#    	is embedded in a piece of equipment, either of the following two
#   	 conditions must be satisfied:
#
#		(a) The above copyright notice, this use conditions, and the
#         	disclaimer shown below must be shown without modification in
#     		the document provided with the redistributed software, such as
#      		the user manual.
#
# 		(b) How the software is to be redistributed must be reported to the
#     		TOPPERS Project according to the procedure described
#     		separately.
#
#	(4) The above copyright holders and the TOPPERS Project are exempt
#    	from responsibility for any type of damage directly or indirectly
#   	caused from the use of this software and are indemnified by any
#    	users or end users of this software from any and all causes of
#    	action whatsoever.
#
#	THIS SOFTWARE IS PROVIDED "AS IS." THE ABOVE COPYRIGHT HOLDERS AND
#	THE TOPPERS PROJECT DISCLAIM ANY EXPRESS OR IMPLIED WARRANTIES,
#	INCLUDING, BUT NOT LIMITED TO, ITS APPLICABILITY TO A PARTICULAR
#	PURPOSE. IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS AND THE
#	TOPPERS PROJECT BE LIABLE FOR ANY TYPE OF DAMAGE DIRECTLY OR
#	INDIRECTLY CAUSED FROM THE USE OF THIS SOFTWARE.
# 
#  @(#) $Id: genoffset 1891 2010-08-06 10:22:51Z ertl-hiro $
# 

#
#  initialization
#
$infile = $ARGV[0];
$sil_endian = "";

#
#  the explainable directives table
#
%directives = (
	"long", "",
	"dword", "",
	"word", "",
	"hword", "",
	"int", "",
	"short", "",
	"half", "",
	"byte", "",
	"value", "",
	"uaword", "",
	"uashort", "",
	"data32", 4,
	"data16", 2,
	"data8", 1,
	"zero", -1,
	"space", -1,
	"globl", 0,
	"global", 0,
	"align", 0,
	"p2align", 0,
	"even", 0,
	"data", 0,
	"stabs", 0,
	"type", 0,
	"size", 0,
	"section", 0,
	"sdata", 0,
	"code", 0,
);

#
#  output offset
#
sub parse_offset {
	my($label, $val) = @_;

	printf "#define %s\t%d\n",$label,$val;
}

#
#  read directives
#
sub ref_bit {
	my($size) = @_;
	my($dir, $directive);

	while ($line = <INFILE>) {
		chomp $line;
		next if ($line =~ /^[ \t]*[#;].*$/);

		if ($line =~ /[ \t]*\.([a-zA-Z0-9]+)[ \t]*([^ \t]*)[ \t]*/
						&& defined($dir = $directives{$1})) {
			$directive = $1;
			if ($dir eq "") {
				# the registered directive
				$directives{$directive} = $size;
			}
			last;
		}
		else {
			# the unexplainable directive
			print STDERR "genoffset: cannot parse: $line\n";
			$error = 1;
		}
	}
}

#
#  bit search
#
sub search_bit {
	my($val) = @_;
	my($val_bit);

	return(-1) if ($val == 0);

	$val_bit = 0;
	while (($val & 1) == 0) {
		$val >>= 1;
		$val_bit++;
	}
	return($val_bit);
}

#
#  output bit's place
#
sub parse_bit {
	my($endian, $size, $label) = @_;
	my($offset, $dir, $val, $val_bit);

	if ($sil_endian && $endian ne $sil_endian) {
		# endian mismatch
		print STDERR "genoffset: endian mismatch: $line\n";
		$error = 1;
	}

	$offset = 0;
	while ($line = <INFILE>) {
		chomp $line;
		next if ($line =~ /^[ \t]*[#;].*$/);

		if ($line =~ /[ \t]*\.([a-zA-Z0-9]+)[ \t]*([^ \t]*)[ \t]*/
						&& defined($dir = $directives{$1})) {
			$val = $2;

			# get the hex or oct value from string
			if ($val =~ /^0x(.+)$/) {
				$val = hex($1);
			}
			elsif ($val =~ /^0(.+)$/) {
				$val = oct($1);
			}

			if ($dir eq "") {
				#  unknow directives
				print STDERR "genoffset: unknown directive: $line\n";
				$error = 1;
			}
			elsif ($dir == 0) {
				# the directives to be skipped
			}
			elsif ($dir == -1) {
				# processing of .zero
				$offset += $val;
			}
			elsif ($val == 0) {
				# processing of 0 field
				$offset += $dir;
			}
			else {
				# if not 0, end loop
				last;
			}
		}
		else {
			# the lines that can not be parsed
			print STDERR "genoffset: cannot parse: $line\n";
			$error = 1;
		}
	}

	# search bit
	$val_bit = do search_bit($val);

	# calculate in bytes
	if ($endian eq "B") {
		$offset += $dir - 1;
		$offset -= $val_bit >> 3;
	}
	else {
		$offset += $val_bit >> 3;
	}
	$val_bit &= 0x07;

	# calculate in output unit
	if ($size eq "W") {
		if ($endian eq "B") {
			$val_bit += 24;
			$val_bit -= ($offset & 0x03) << 3;
		}
		else {
			$val_bit += ($offset & 0x03) << 3;
		}
		$offset &= ~0x03;
	}
	elsif ($size eq "H") {
		if ($endian eq "B") {
			$val_bit += 8;
			$val_bit -= ($offset & 0x01) << 3;
		}
		else {
			$val_bit += ($offset & 0x01) << 3;
		}
		$offset &= ~0x01;
	}

	# output definitions
	$label =~ s/^_//;
	printf "#define %s\t%d\n",$label,$offset;
	printf "#define %s_bit\t%d\n",$label,$val_bit;
	printf "#define %s_mask\t0x%x\n",$label,(1 << $val_bit);
}

#
#  main routine
#
print "/* This file is generated by genoffset. */\n";
print "\n";

$error = 0;
open(INFILE, $infile) || die "Cannot open $infile";
while ($line = <INFILE>) {
	chomp $line;

	if ($line =~ /^[ \t]*OFFSET_DEF ([^ \t]+) = [#\$]?([^ \t]+)/) {
		do parse_offset($1, $2);
	}
	elsif ($line =~ /^[ \t]*_?BIT_REF_([0-9]+):/) {
		do ref_bit($1);
	}
	elsif ($line =~ /^[ \t]*SIL_ENDIAN = ([BL])/) {
		$sil_endian = $1;
	}
}
#
#  the compiler may change the order of variables¡¤BIT_REF_? may be at
#  the tail, so read from head.
#
seek(INFILE, 0, SEEK_SET);
while ($line = <INFILE>) {
	chomp $line;

	if ($line =~ /^[ \t]*_?BIT_([BL])([BHW])_([^ \t]+):/) {
		do parse_bit($1, $2, $3);
	}
}
close(INFILE);
exit($error);
